


/*–ú–∞–∫—Ä–æ—Å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ç–µ–º–ø–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è
–°–ø–∞—Å–∏–±–æ –∑–∞ –º–∞–∫—Ä–æ—Å Salamander!
–î–æ—Ä–∞–±–æ—Ç–∞–ª Xeonis 
-------------------------------------------------------------------------------------
–≠—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å

–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏*/
let settings = {

}
const defaultSpeed = 30; // –ë–∞–∑–æ–≤–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å 30 —Ñ—É—Ç–æ–≤ –∑–∞ —Ä–∞—É–Ω–¥
const defaultHoursPerDay = 8; //–ë–∞–∑–æ–≤–æ–µ –≤—Ä–µ–º—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π
const crewedTransportHoursPerDay = 24; // —á–∞—Å–æ–≤ –≤ —Å—É—Ç–∫–∞—Ö
const undergroundTravelDivider = 4; //–º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–¥–∑–µ–º—å—è
const difficultyMovement = 0.5 //–º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç—Ä—É–¥–Ω–æ–π –º–µ—Å—Ç–Ω–æ—Å—Ç–∏
const weekLength = 7; // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª–µ

const forcedHikeMoveFormula = (overhour) => {return 10 + overhour} // —Ñ–æ—Ä–º—É–ª–∞ —Ä–∞—Å—á–µ—Ç–∞ —É—Å—Ç–∞–ª–æ—Å—Ç–∏

const paceOptions = {
    fast: {
        modifier: 1.3334,
        description: "–ë—ã—Å—Ç—Ä—ã–π —Ç–µ–º–ø: –®—Ç—Ä–∞—Ñ ‚àí5 –∫ –ø–∞—Å—Å–∏–≤–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é –ú—É–¥—Ä–æ—Å—Ç–∏ (–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å)",
        name: "–ë—ã—Å—Ç—Ä—ã–π"
    },
    normal: {
        modifier: 0.6667,
        description: "–ù–æ—Ä–º–∞–ª—å–Ω—ã–π —Ç–µ–º–ø",
        name: "–ù–æ—Ä–º–∞–ª—å–Ω—ã–π"
    },
    slow: {
        modifier: 1.3334,
        description: "–ú–µ–¥–ª–µ–Ω–Ω—ã–π —Ç–µ–º–ø: –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–º–µ—â–∞—Ç—å—Å—è —Å–∫—Ä—ã—Ç–Ω–æ",
        name: "–ë—ã—Å—Ç—Ä—ã–π"
    },
}


//–§–æ—Ä–º—ã–ª—ã 
const TypesOfMoves = {
    underground: {
        default: true,
        label: "–ú–æ—Ä—Å–∫–æ–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
        paceOptionsActive:true,
        difficultTerrain: true,
        mainFormulaInDays: false,
        formula: ({speed}) => {return ((speed / 10) / undergroundTravelDivider);},
        placeholder: '–í–≤–µ–¥–∏—Ç–µ —Å–∫–æ—Ä–æ—Å—Ç—å —Å—É–¥–Ω–∞ (–º–∏–ª–∏/—á)'
    },
    shipped: {
        default: true,
        label: "–ü–æ–¥–∑–µ–º—å–µ",
        paceOptionsActive:true,
        difficultTerrain: true,
        mainFormulaIsDays: true,
        formula: ({speed}) => {return (speed);},
        placeholder: '–¢–µ–º–ø –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –≤ –ø–æ–¥–∑–µ–º—å–µ'
    },
    default: {
        default: true,
        paceOptionsActive:true,
        difficultTerrain: true,
        mainFormulaIsDays: false,
        formula: ({speed}) => {return (speed) / 10;},
        placeholder: '–ë–∞–∑–æ–≤—ã–π —Ç–µ–º–ø (–ø—Ä–∏ –ø—É—Å—Ç–æ–º –ø–æ–ª–µ)'
    },
    gallop:{
        default: true,
        label: "–ì–∞–ª–æ–ø",
        paceOptionsActive:true,
        difficultTerrain: true,
        mainFormulaIsDays: true,
        formula: ({speed, overhour = 1, hoursPerDay, defaultSpeed}) => {
            return ((speed* (hoursPerDay-overhour)) + (overhour*2*defaultSpeed*paceOptions.fast.modifier)) / 10;
        },
        placeholder: '–¢–µ–º–ø –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –≤ –≥–∞–ª–æ–ø–æ–º'
    }
}



/*-----------------------------------------------------------------------------------
-------------------------------------------------------------------------------------
–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –º–∞–∫—Ä–æ—Å–æ–≤ –∏ –º–æ–¥—É–ª–µ–π –¥–ª—è Fvtt –ø–∏—Å–∞—Ç—å -- Xeonis
-------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------
–î–∞–ª–µ–µ —ç—Ç–æ–≥–æ –∫–æ–º–µ–Ω—Ç–∞—Ä–∏—è –∏–¥–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥ –Ω–∏—á–µ–≥–æ –Ω–µ —Ç–æ—Ä–≥–∞–π—Ç–µ, –Ω—É –∏–ª–∏ —Ç—Ä–æ–≥–∞–π—Ç–µ :)
-------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------*/

const shiftKey = event?.shiftKey ? true : false;
const simpleClendarModule = game.modules.get("foundryvtt-simple-calendar")?.active

///////////////////////////////////////////////////////
///////////////////////////////////////////////////////
/*
    –§–£–ù–ö–¶–ò–ò –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –î–ò–ê–õ–û–ì–û–í–û–ì–û –û–ö–ù–ê
*/
///////////////////////////////////////////////////////
///////////////////////////////////////////////////////



const buttonBlocker = (box,travel) =>  {
    const speedInput = document.getElementById('speed-input');
    speedInput.placeholder = TypesOfMoves.default.placeholder;
    //–ø–µ—Ä–µ–±–∏—Ä–∞—é, –≤–∫–ª—é—á–∞—é –Ω—É–∂–Ω—ã–µ –∏ –≤—ã–∫–ª—é—á–∞—é –Ω–µ –Ω—É–∂–Ω—ã–µ
    for (const key in TypesOfMoves) {
        if (Object.hasOwnProperty.call(TypesOfMoves, key)) {
            if (key == "default" ) continue; 
            const element = document.getElementById(`move-checkbox-${key}`);
            if (!element === null) continue;
            if (travel == key && box.checked) {
                speedInput.placeholder = TypesOfMoves[key].placeholder
                element.checked = box.checked;
            } else {
                element.checked = false;
            }
        }
    }
}
const buttonActiveStageList = () => {
   console.log( "—Å—á–∏—Ç–∞—Ç—å —Å—Ç—Ä–∞–∑—É –≤—Å–µ")
}



//style="display: flex; align-items: center;"
const content = () => {
    let moveCheckbox = []
    for (const key in TypesOfMoves) {
        if (Object.hasOwnProperty.call(TypesOfMoves, key)) {
            if (key == "default" ) continue; 
            const element = TypesOfMoves[key];
            moveCheckbox.push(`<div style="text-align: center;"><p class="move-checkbox">${element.label.replace(/ /g ,"<br>")}</p>
                                <input type="checkbox" style="margin:auto" id="move-checkbox-${key}"></div>`)
        }
    }
    // –ø–æ–∑—Å–∫–∞–∑–∫–∏
    let assist = (text) => {return `<i class="tip fas fa-info-circle" data-tooltip="${text}"></i>`}



    return `
    <style>
        .move-checkbox {
            line-height: 1; font-size: smaller;
        }
    </style>
    <div class ="macro-travel">
        <div style="flex-grow: 1;">
            <p>–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –º–∏–ª—è—Ö:
            <input id="distance-input" type="number" style="width: calc(40% - 20px);"></p>
        </div>
        <div>
            <p class="move-checkbox";">üìà –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç—Ç–∞–ø–æ–≤</p>
            <input type="checkbox" id="stages" value="true" onclick="buttonActiveStageList()">
        </div>
        </div>
        <div style="display: flex; align-items: end; justify-content: space-around;">${moveCheckbox.join("\n")}</div>
        <div style="flex-grow: 1; margin-right: 10px;">
            <p>–í–≤–µ–¥–∏—Ç–µ —Å–∫–æ—Ä–æ—Å—Ç—å:
            <input id="speed-input" type="number" placeholder="–ë–∞–∑–æ–≤—ã–π —Ç–µ–º–ø (–ø—Ä–∏ –ø—É—Å—Ç–æ–º –ø–æ–ª–µ)" style="width: calc(70% - 20px);"></p>
        </div>
        <div>
            <div style="font-size: small;">
                <p><input type="checkbox" id="difficult-terrain" value="true">üó∫Ô∏è–ü–µ—Ä–µ—Å–µ—á–µ–Ω–Ω–∞—è –º–µ—Å—Ç–Ω–æ—Å—Ç—å</p>
                <p><input type="checkbox" id="crewed-transport" value="true">üïõ–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ 24 —á–∞—Å–æ–≤–æ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è</p>
                <p>
                    <input type="checkbox" id="dice-roll-checkbox" value="1d20">üé≤–ü—Ä–æ–≤–µ—Ä–∫–∞ 
                    <input id="dice-roll" type="number" placeholder="1d20" style="width: calc(18% - 20px);"> –∑–∞ –∫–∞–∂–¥—ã–π 
                    <select id="dice-roll-time" style="width: 15%">
                        <option value="day" selected>–¥–µ–Ω—å</option>
                        <option value="hour" >—á–∞—Å</option>
                        <option value="week">–Ω–µ–¥–µ–ª—é</option>
                    </select> –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è
                </p>
                <p style="margin: auto;">
                    <input type="checkbox" id="overhour-checkbox" value="1">üå°Ô∏è–§–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ +
                    <input id="overhour-value" type="number" placeholder="1" style="width: calc(15% - 20px);"> —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å 
                </p>
                
                <details style="margin: auto;" class = "info">
                        <summary>–û —Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–∏–∏</summary>
                        –†–∞–±–æ—Ç–∞–µ—Ç 2 —Å–ø–æ—Å–æ–±–∞–º–∏<br>
                        1) –î–æ–±–∞–≤–ª—è–µ—Ç –∫ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—é –≤ –¥–µ–Ω—å —á–∞—Å—ã –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∏ –ø–æ–º–µ—á–∞–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Å–∞ —Å–≤–µ—Ä—Ö –Ω–æ—Ä–º—ã<br>
                        <p style="font-size: smaller;margin: auto;"> (–±—É–¥—Ç–µ –∞–∫–∫—É—Ä–∞—Ç–Ω—ã) –ø–æ–¥—Å—á–µ—Ç —É—Å—Ç–∞–ª–æ—Å—Ç–∏ –º—ã —Ç—É—Ç –Ω–µ –≤–µ–¥–µ–º</p>
                        2) –ü—Ä–∏ –≥–∞–ª–ª–æ–ø–µ –∏ –≤—ã–∫–ª—é—á–µ–Ω–Ω–æ–π –≥–∞–ª–æ—á–∫–µ —É–∫–∞–∑–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ —Å—á–∏—Ç–∞–µ—Ç—Å—è –∫–∞–∫ —á–∞—Å—ã –≥–∞–ª–æ–ø–∞ –≤ –¥–µ–Ω—å
                </details>
        </div>
        <div>
            <p>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º–ø:
            <select id="pace" style="width: 50%">
                <option value="fast">–ë—ã—Å—Ç—Ä—ã–π</option>
                <option value="normal" selected>–ù–æ—Ä–º–∞–ª—å–Ω—ã–π</option>
                <option value="slow">–ú–µ–¥–ª–µ–Ω–Ω—ã–π</option>
            </select></p>
        </div>   
</div>


`
} 




///////////////////////////////////////////////////////
///////////////////////////////////////////////////////
/*
    –°–ë–û–† –û–¢–í–ï–¢–ê
*/
///////////////////////////////////////////////////////
///////////////////////////////////////////////////////

const createMessage = ({days,hours,distance,selectedPace,isCrewedTransport,isUndergroundTravel,userEnteredSpeed,milesPerHour,milesPerDay,isDifficultTerrain}) => {
    //–æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    let messageContent = `–í—Ä–µ–º—è: ${days} –¥–Ω–µ–π –∏ ${hours}. <br>
    –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${distance} –º–∏–ª—å. <br>
    ${paceOptions[selectedPace].description}. <br>
    –ü–µ—Ä–µ—Å–µ—á–µ–Ω–Ω–∞—è –º–µ—Å—Ç–Ω–æ—Å—Ç—å: ${isDifficultTerrain ? "–î–∞" : "–ù–µ—Ç"}. <br>
    ${(isCrewedTransport ? "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ 24 —á–∞—Å–æ–≤–æ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è.<br>"  : "")}
    ${(isUndergroundTravel ? '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –≤ –ø–æ–¥–∑–µ–º—å–µ. <br>' : '')}
    –í–≤–µ–¥–µ–Ω–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: ${userEnteredSpeed ? userEnteredSpeed + (isSeaTravel ? " –º–∏–ª–∏/—á" : " —Ñ—Ç/—Ä–∞—É–Ω–¥") : "–ë–∞–∑–æ–≤–∞—è"}. <br>
    –°–∫–æ—Ä–æ—Å—Ç—å –≤ –º–∏–ª—è—Ö/—á–∞—Å: ${milesPerHour}. <br>
    –°–∫–æ—Ä–æ—Å—Ç—å –≤ –º–∏–ª—è—Ö/–¥–µ–Ω—å: ${milesPerDay}.`;

    ChatMessage.create({
        content: messageContent,
        speaker: ChatMessage.getSpeaker(),
        whisper: ChatMessage.getWhisperRecipients("GM"),
    });
}


///////////////////////////////////////////////////////
///////////////////////////////////////////////////////
/*
    –í–´–ß–ò–°–õ–Ø–õ–ö–ò
*/
///////////////////////////////////////////////////////
///////////////////////////////////////////////////////


///////////////////////////////////////////////////////
/*–æ—Å–Ω–æ–≤–Ω–æ–π —Ä–∞—Å—á–µ—Ç*/
///////////////////////////////////////////////////////
const calculateDistance = () => {
        
}

function toFix (number) {
    const part = number - Math.trunc(number)
    return  Math.floor(number) + (part > 0.05)? part.toFixed(1) : 0
}

function roundDown(num) {
    return Math.floor(num);
}

function convertHoursToTime(hours) {
    const wholeHours = Math.floor(hours);
    const minutes = Math.round((hours - wholeHours) * 60);
    return `${wholeHours}:${minutes.toString().padStart(2, '0')} —á–∞—Å–∞`;
}




//—Ä—Å—á–µ—Ç —Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–∞—Ä—à–∞
const forcedHikeMoveCalc = (overhours = 1) => {
    if (overhours == 0) return []
    let answer = []
    for (let over = 1; over < overhours; over++) {
        answer.push(`${defaultHoursPerDay+over} —á–∞—Å - ${forcedHikeMoveFormula(over)}`)
    }
    return answer
}


const countRollsForumula = ({diceRollTime, weeks, days, totalDays, hoursPerDay,diceRoll}) => {
    let CountRolls = 0;
    switch (diceRollTime) {
        case "week":
            CountRolls = weeks
            break;
        case "hour":
            CountRolls = roundDown(totalDays * hoursPerDay)
            break;
        default:
            CountRolls = days
            break;
    }
    return Array(CountRolls).fill(new Roll(`${diceRoll}`).evaluate({async: false}));
};



///////////////////////////////////////////////////////
///////////////////////////////////////////////////////
/*
    –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–¢–í–ï–¢–ê
*/
///////////////////////////////////////////////////////
///////////////////////////////////////////////////////



const mainDialogCallback = (html) => {
    let data = {}

    data.distance = parseFloat($(html).find("#distance-input").val()) || 1;
    data.userEnteredSpeed = parseFloat($(html).find("#speed-input").val());
    data.selectedPace = $(html).find("#pace").val();

    data.isSeaTravel = $(html).find("#sea-travel").is(":checked") || false;
    data.isDifficultTerrain = $(html).find("#difficult-terrain").is(":checked") || false;
    data.isCrewedTransport = $(html).find("#crewed-transport").is(":checked") || false;
    data.isUndergroundTravel = $(html).find("#underground-travel").is(":checked") || false;
    data.isGallop = $(html).find("#gallop-travel").is(":checked") || false;

    //–§–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ
    const isOverhourMovement = $(html).find("#overhour-checkbox").is(":checked") || false
    const overhour = parseFloat($(html).find("#overhour-value").val()) || 1;
    data.isOverhourMovement = isOverhourMovement;
    data.overhour = overhour;
    //–±—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞ –∫–∞–∂–¥—ã–π
    data.isCheckedDiceRoll = $(html).find("#dice-roll-checkbox").is(":checked") || false
    data.diceRollTime = $(html).find("#dice-roll-time").val() || "day"
    data.diceRoll = $(html).find("#dice-roll").val() || "1d20"

    let speed = data.userEnteredSpeed || defaultSpeed;
    let mainSpeed = speed;
    let hoursPerDay = data.isCrewedTransport ? crewedTransportHoursPerDay : (defaultHoursPerDay + ((isOverhourMovement)? overhour : 0)) ;
    data.mainSpeed = mainSpeed;
    data.hoursPerDay = hoursPerDay;
    let milesPerHour;
    let milesPerDay;
    console.log(1);
    


    
    let move = TypesOfMoves.default
    //–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ñ–æ—Ä–º—É–ª—ã
    if (data.isUndergroundTravel) {
        move = TypesOfMoves.underground
    }else if (data.isSeaTravel){
        move = TypesOfMoves.shipped
    }else if (data.isGallop){
        move = TypesOfMoves.gallop
    }

    

    // –°–Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å —Å —É—á–µ—Ç–æ–º —Ç–µ–º–ø–∞
    if (move.paceOptionsActive) speed *= paceOptions[data.selectedPace].modifier

    if (move.mainFormulaIsDays) {
        milesPerDay = roundDown(move.formula({speed, mainSpeed, hoursPerDay, overhour ,defaultSpeed}))
        // –ó–∞—Ç–µ–º –ø—Ä–∏–º–µ–Ω—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –º–µ—Å—Ç–Ω–æ—Å—Ç–∏   
        if (data.isDifficultTerrain && move.difficultTerrain) milesPerDay *= difficultyMovement;
        milesPerHour = toFix(milesPerDay / hoursPerDay)
    }else{
        milesPerHour = toFix(move.formula({speed, mainSpeed, hoursPerDay, overhour,defaultSpeed}))
        // –ó–∞—Ç–µ–º –ø—Ä–∏–º–µ–Ω—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –º–µ—Å—Ç–Ω–æ—Å—Ç–∏   
        if (data.isDifficultTerrain && move.difficultTerrain) milesPerHour *= difficultyMovement;
        milesPerDay = roundDown(milesPerHour * hoursPerDay)
    }

    //–ø–æ—Å—á–∏—Ç–∞–µ–º –¥–µ–µ–Ω–µ—á–∫–∏
    let totalDays = data.distance / milesPerDay;
    data.totalDays = totalDays
    data.milesPerDay = milesPerDay
    data.milesPerHour = milesPerHour
    data.days = Math.floor(totalDays);
    data.hours = convertHoursToTime((totalDays - data.days) * hoursPerDay);
    data.weeks = Math.floor(data.days/weekLength)
    data.countRolls = countRollsForumula(data);
    console.log(data);
    createMessage(data)
}


///////////////////////////////////////////////////////
///////////////////////////////////////////////////////
/*–û–°–ù–û–í–ù–û–ï –î–ò–ê–õ–û–ì–û–í–û–ï –û–ö–ù–û*/
///////////////////////////////////////////////////////
///////////////////////////////////////////////////////


//–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –≤ –º–∞–∫—Ä–æ—Å–µ
const handleRender = (html) => {
    console.log(1);
    for (const key in TypesOfMoves) {
        if (Object.hasOwnProperty.call(TypesOfMoves, key)) {
            if (key == "default" ) continue; 
            html.on('click',`#move-checkbox-${key}`, (htmlc) => buttonBlocker(htmlc.target,key));
        }
    }
    
}


//—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ –æ–∫–æ—à–∫–æ
const mainWindow = new Dialog({
    title: "–†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è",
    content,
    buttons: {
        go:{
            icon: '<i class="fas fa-check"></i>',
            label: "–ì–æ—Ç–æ–≤–æ",
            callback: html => mainDialogCallback(html)
        },
    },
    default: "close",
    render: handleRender,
    close: html => console.log("This always is logged no matter which option is chosen")    
},{
    resizable:true, 
  })
mainWindow.render(true);



///////////////////////////////////////////////////////
///////////////////////////////////////////////////////
/*—Å–ø–∞—Å–∏–±–æ –∑–∞ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —ç—Ç–æ–º –≤—Å–µ*/
///////////////////////////////////////////////////////
///////////////////////////////////////////////////////






















/*


const colspan = `colspan="${rolls.length + 1}"`;
const center = `text-align:center;`;

content = `
  <table>
    <tr>
      <td ${colspan}><h2 style="margin-bottom:0; ${center}">–ó–Ω–∞—á–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫</h2>
      <div style="margin-bottom: 0.5rem; ${center}">${statString} –±—ã–ª–∏ –ø—Ä–æ–±—Ä–æ—à–µ–Ω—ã ${numRolls} —Ä–∞–∑.</div></td>
    </tr>
    <tr style="${center} border-bottom:1px solid #000">
      ${header}
      <th style="border-left:1px solid #000">–ò—Ç–æ–≥</th>
    </tr>
    ${tableRows}
    <tr style="border-top: 1px solid #000">
      <th colspan="${rolls.length}" style="${center}">–§–∏–Ω–∞–ª—å–Ω–∞—è —Å—É–º–º–∞:</th>
      <th style="${center}">${finalSum}</th>
    </tr>

  </table>
`;


*/




